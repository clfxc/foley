// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = ".client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

// NextAuth.js Models
// @see https://next-auth.js.org/schemas/models
model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int?
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in String?
  access_token             String?
  expires_in               String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([provider, providerAccountId])
  @@index([userId, type, provider])
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  smols         Smol[]
  posts         Post[]
  contact       Contact[]
  roles         User_role[]

  @@index(name)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

model Smol {
  id        Int      @id @default(autoincrement())
  userId    Int
  status    String   @default("active")
  slug      String
  url       String
  accessed  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index(userId)
  @@index(slug)
}

model Post {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String
  excerpt     String
  author      String
  category    String
  accessed    Int      @default(0)
  ownerId     Int?
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index(createdAt)
  @@index(ownerId)
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String
  message   String
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index(createdAt)
  @@index(name)
  @@index(userId)
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  users     User_role[]
}

model User_role {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index(userId)
  @@index(roleId)
}
